# main.py
from dotenv import load_dotenv
load_dotenv()

import os
import re
import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from typing import Optional, List, Tuple

from aiohttp import web

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, BotCommand
)

# ======================= ENV / DEFAULTS =======================
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_REMINDER_HOUR = int(os.getenv("REMINDER_HOUR", "9"))  # –¥–µ—Ñ–æ–ª—Ç ‚Äì 09:00
DEFAULT_TZ_OFFSET = float(os.getenv("TZ_OFFSET", "3"))        # –¥–µ—Ñ–æ–ª—Ç ‚Äì –ú–æ—Å–∫–≤–∞ (UTC+3)

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),  # –±–µ–∑ DeprecationWarning
)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# ======================= Keep-alive HTTP (Render Web Service) =======================
async def handle_root(_):
    return web.Response(text="OK")

async def start_web_app():
    app = web.Application()
    app.add_routes([web.get("/"), web.get("/healthz")], handler=handle_root)  # type: ignore
    # —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö/–Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π aiohttp:
    app.router.add_get("/", handle_root)
    app.router.add_get("/healthz", handle_root)
    port = int(os.getenv("PORT", "10000"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"HTTP keep-alive on 0.0.0.0:{port}")

# ======================= DB =======================
db = sqlite3.connect("closet.db", check_same_thread=False)
db.row_factory = sqlite3.Row
cur = db.cursor()

cur.execute("""
CREATE TABLE IF NOT EXISTS clothes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT,
    category TEXT,
    last_worn TEXT,
    last_washed TEXT,
    worn_count INTEGER
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    notify_enabled INTEGER DEFAULT 1
)
""")
db.commit()

def _ensure_column(table: str, column: str, alter_sql: str) -> None:
    cur.execute(f"PRAGMA table_info({table})")
    cols = {row["name"] for row in cur.fetchall()}
    if column not in cols:
        logging.info(f"Adding column {table}.{column}")
        cur.execute(alter_sql)
        db.commit()

# –ú—è–≥–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
_ensure_column("users", "notify_hour", "ALTER TABLE users ADD COLUMN notify_hour INTEGER")
_ensure_column("users", "notify_minute", "ALTER TABLE users ADD COLUMN notify_minute INTEGER")
_ensure_column("users", "tz_offset", "ALTER TABLE users ADD COLUMN tz_offset REAL")
_ensure_column("users", "last_reminder_date", "ALTER TABLE users ADD COLUMN last_reminder_date TEXT")

# ======================= FSM =======================
class AddClothes(StatesGroup):
    waiting_for_name = State()
    waiting_for_category = State()

class WearFlow(StatesGroup):
    choosing = State()

class WashFlow(StatesGroup):
    choosing = State()

# ======================= Utils =======================
def now_iso() -> str:
    return datetime.utcnow().isoformat(timespec="seconds")

def parse_iso(s: Optional[str]) -> Optional[datetime]:
    if not s:
        return None
    try:
        return datetime.fromisoformat(s)
    except Exception:
        return None

async def set_commands():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –∏ –ø–æ–º–æ—â—å"),
        BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å"),
        BotCommand(command="wear", description="–û—Ç–º–µ—Ç–∏—Ç—å: –Ω–∞–¥–µ–ª"),
        BotCommand(command="wash", description="–û—Ç–º–µ—Ç–∏—Ç—å: –ø–æ—Å—Ç–∏—Ä–∞–ª"),
        BotCommand(command="status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—â–µ–π"),
        BotCommand(command="notify_on", description="–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand(command="notify_off", description="–í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand(command="notify_time", description="–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (HH[:MM])"),
        BotCommand(command="notify_tz", description="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC¬±—Å–º–µ—â–µ–Ω–∏–µ"),
    ])

def upsert_user(user_id: int):
    cur.execute("""
        INSERT INTO users(user_id, notify_enabled, notify_hour, notify_minute, tz_offset)
        VALUES (?, 1, ?, 0, ?)
        ON CONFLICT(user_id) DO NOTHING
    """, (user_id, DEFAULT_REMINDER_HOUR, DEFAULT_TZ_OFFSET))
    db.commit()

def get_user_settings(user_id: int):
    upsert_user(user_id)
    cur.execute("""
        SELECT notify_enabled,
               COALESCE(notify_hour, ?)   AS notify_hour,
               COALESCE(notify_minute, 0) AS notify_minute,
               COALESCE(tz_offset, ?)     AS tz_offset,
               last_reminder_date
        FROM users WHERE user_id=?
    """, (DEFAULT_REMINDER_HOUR, DEFAULT_TZ_OFFSET, user_id))
    return cur.fetchone()

def set_notify(user_id: int, enabled: bool):
    upsert_user(user_id)
    cur.execute("UPDATE users SET notify_enabled=? WHERE user_id=?", (1 if enabled else 0, user_id))
    db.commit()

def set_notify_time(user_id: int, hour: int, minute: int):
    upsert_user(user_id)
    cur.execute("UPDATE users SET notify_hour=?, notify_minute=? WHERE user_id=?", (hour, minute, user_id))
    db.commit()

def set_tz(user_id: int, tz_offset: float):
    upsert_user(user_id)
    cur.execute("UPDATE users SET tz_offset=? WHERE user_id=?", (tz_offset, user_id))
    db.commit()

def set_last_sent(user_id: int, date_str: str):
    cur.execute("UPDATE users SET last_reminder_date=? WHERE user_id=?", (date_str, user_id))
    db.commit()

def build_keyboard(names: List[str], per_row: int = 3) -> ReplyKeyboardMarkup:
    rows, row = [], []
    for i, n in enumerate(names, 1):
        row.append(KeyboardButton(text=n))
        if i % per_row == 0:
            rows.append(row); row = []
    if row:
        rows.append(row)
    rows.append([KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

# ======================= Handlers =======================
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    upsert_user(message.from_user.id)
    s = get_user_settings(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–¥–µ–∂–¥—É –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Å—Ç–∏—Ä–∫–µ.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å\n"
        "‚Ä¢ /wear ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞–¥–µ–ª\n"
        "‚Ä¢ /wash ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ—Å—Ç–∏—Ä–∞–ª\n"
        "‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å –≤–µ—â–µ–π\n"
        "‚Ä¢ /notify_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ /notify_off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ /notify_time HH[:MM] ‚Äî –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Å–µ–π—á–∞—Å "
        f"{s['notify_hour']:02d}:{s['notify_minute']:02d})\n"
        "‚Ä¢ /notify_tz ¬±X[.5] ‚Äî —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (—Å–µ–π—á–∞—Å UTC"
        f"{float(s['tz_offset']):+g})\n"
    )

@router.message(F.text == "/notify_on")
async def notify_on(message: Message):
    set_notify(message.from_user.id, True)
    await message.answer("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. ‚úâÔ∏è")

@router.message(F.text == "/notify_off")
async def notify_off(message: Message):
    set_notify(message.from_user.id, False)
    await message.answer("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã. üîï")

@router.message(F.text.regexp(r"^/notify_time(\s+.+)?$"))
async def notify_time(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) == 1:
        s = get_user_settings(message.from_user.id)
        await message.answer(
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {s['notify_hour']:02d}:{s['notify_minute']:02d}\n"
            "–ó–∞–¥–∞–π —Ç–∞–∫: /notify_time 9 –∏–ª–∏ /notify_time 09:30"
        )
        return
    val = parts[1].strip()
    m = re.fullmatch(r"(\d{1,2})(?::(\d{2}))?$", val)
    if not m:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /notify_time 9 –∏–ª–∏ /notify_time 09:30")
        return
    hour = int(m.group(1)); minute = int(m.group(2) or "0")
    if not (0 <= hour <= 23 and 0 <= minute <= 59):
        await message.answer("–ß–∞—Å—ã 0‚Äì23, –º–∏–Ω—É—Ç—ã 0‚Äì59.")
        return
    set_notify_time(message.from_user.id, hour, minute)
    await message.answer(f"–û–∫! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤ {hour:02d}:{minute:02d} –ø–æ —Ç–≤–æ–µ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É.")

@router.message(F.text.regexp(r"^/notify_tz(\s+.+)?$"))
async def notify_tz(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) == 1:
        s = get_user_settings(message.from_user.id)
        await message.answer(
            f"–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC{float(s['tz_offset']):+g}\n"
            "–ó–∞–¥–∞–π —Ç–∞–∫: /notify_tz +3 –∏–ª–∏ /notify_tz -5 –∏–ª–∏ /notify_tz +5.5"
        )
        return
    val = parts[1].strip().replace(",", ".")
    m = re.fullmatch(r"([+-]?\d+(?:\.\d+)?)", val)
    if not m:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /notify_tz +3 –∏–ª–∏ /notify_tz -5 –∏–ª–∏ /notify_tz +5.5")
        return
    tz = float(m.group(1))
    if not (-12.0 <= tz <= 14.0):
        await message.answer("–°–º–µ—â–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç -12 –¥–æ +14.")
        return
    set_tz(message.from_user.id, tz)
    await message.answer(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: UTC{tz:+g}")

# ---- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—â–∏ ----
@router.message(F.text == "/add")
async def cmd_add(message: Message, state: FSMContext):
    await state.set_state(AddClothes.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏:")

@router.message(AddClothes.waiting_for_name, F.text.len() > 0)
async def add_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(AddClothes.waiting_for_category)
    await message.answer("–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Ñ—É—Ç–±–æ–ª–∫–∞, –¥–∂–∏–Ω—Å—ã –∏ —Ç.–ø.):")

@router.message(AddClothes.waiting_for_category, F.text.len() > 0)
async def add_cat(message: Message, state: FSMContext):
    data = await state.get_data()
    cur.execute("""
        INSERT INTO clothes (user_id, name, category, last_worn, last_washed, worn_count)
        VALUES (?, ?, ?, NULL, NULL, 0)
    """, (message.from_user.id, data["name"], message.text.strip()))
    db.commit()
    await state.clear()
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–∏–ª: <b>{data['name']}</b> ({message.text.strip()})")

# ---- –ù–æ—Å–∏–ª –≤–µ—â—å (/wear) ----
@router.message(F.text == "/wear")
async def cmd_wear(message: Message, state: FSMContext):
    cur.execute("SELECT name FROM clothes WHERE user_id=? ORDER BY name", (message.from_user.id,))
    names = [r["name"] for r in cur.fetchall()]
    if not names:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add")
        return
    await state.set_state(WearFlow.choosing)
    await message.answer("–ß—Ç–æ —Ç—ã <b>–Ω–∞–¥–µ–ª</b>?", reply_markup=build_keyboard(names))

@router.message(WearFlow.choosing, F.text)
async def wear_choose(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    cur.execute("SELECT id FROM clothes WHERE user_id=? AND name=?", (message.from_user.id, message.text))
    row = cur.fetchone()
    if not row:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –≤–µ—â—å. –í—ã–±–µ—Ä–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        return
    cur.execute("UPDATE clothes SET last_worn=?, worn_count=worn_count+1 WHERE id=?", (now_iso(), row["id"]))
    db.commit()
    await state.clear()
    await message.answer(f"üëï –û—Ç–º–µ—á–µ–Ω–æ: –Ω–æ—Å–∏–ª ¬´{message.text}¬ª.", reply_markup=ReplyKeyboardRemove())

# ---- –ü–æ—Å—Ç–∏—Ä–∞–ª –≤–µ—â—å (/wash) ----
@router.message(F.text == "/wash")
async def cmd_wash(message: Message, state: FSMContext):
    cur.execute("SELECT name FROM clothes WHERE user_id=? ORDER BY name", (message.from_user.id,))
    names = [r["name"] for r in cur.fetchall()]
    if not names:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add")
        return
    await state.set_state(WashFlow.choosing)
    await message.answer("–ß—Ç–æ —Ç—ã <b>–ø–æ—Å—Ç–∏—Ä–∞–ª</b>?", reply_markup=build_keyboard(names))

@router.message(WashFlow.choosing, F.text)
async def wash_choose(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    cur.execute("SELECT id FROM clothes WHERE user_id=? AND name=?", (message.from_user.id, message.text))
    row = cur.fetchone()
    if not row:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –≤–µ—â—å. –í—ã–±–µ—Ä–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        return
    cur.execute("UPDATE clothes SET last_washed=?, worn_count=0 WHERE id=?", (now_iso(), row["id"]))
    db.commit()
    await state.clear()
    await message.answer(f"üßº ¬´{message.text}¬ª –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —á–∏—Å—Ç–∞—è!", reply_markup=ReplyKeyboardRemove())

# ---- –°—Ç–∞—Ç—É—Å ----
@router.message(F.text == "/status")
async def cmd_status(message: Message):
    cur.execute("""
        SELECT name, last_worn, last_washed, worn_count
        FROM clothes
        WHERE user_id=?
        ORDER BY name COLLATE NOCASE
    """, (message.from_user.id,))
    rows = cur.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –≤–µ—â–µ–π. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add")
        return
    lines = []
    now = datetime.utcnow()
    for r in rows:
        name = r["name"]
        worn = r["last_worn"] or "–Ω–∏–∫–æ–≥–¥–∞"
        washed = r["last_washed"] or "–Ω–∏–∫–æ–≥–¥–∞"
        count = r["worn_count"] or 0
        line = (
            f"üëï <b>{name}</b>\n"
            f"  ‚Ä¢ –ù–∞–¥–µ–≤–∞–ª–æ—Å—å: {count} —Ä–∞–∑\n"
            f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –Ω–æ—Å–∏–ª: {worn}\n"
            f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∏—Ä–∫–∞: {washed}"
        )
        dt_worn = parse_iso(r["last_worn"])
        dt_washed = parse_iso(r["last_washed"])
        if dt_worn and (dt_washed is None or dt_washed < dt_worn):
            if now - dt_worn >= timedelta(days=7):
                line += "\n  ‚ùó –ü–æ—Ä–∞ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å!"
        lines.append(line)
    await message.answer("\n\n".join(lines))

# ======================= Reminder logic =======================
def due_items_for_user(user_id: int) -> Tuple[List[str], List[str]]:
    cur.execute("SELECT name, last_worn, last_washed FROM clothes WHERE user_id=?", (user_id,))
    rows = cur.fetchall()
    need_wash, long_idle = [], []
    now = datetime.utcnow()
    for r in rows:
        name = r["name"]
        dt_worn = parse_iso(r["last_worn"])
        dt_washed = parse_iso(r["last_washed"])
        # 1) –Ω–æ—Å–∏–ª –∏ –Ω–µ —Å—Ç–∏—Ä–∞–ª >= 7 –¥–Ω–µ–π
        if dt_worn and (dt_washed is None or dt_washed < dt_worn):
            if now - dt_worn >= timedelta(days=7):
                need_wash.append(name)
        # 2) —á–∏—Å—Ç–∞—è (—Å—Ç–∏—Ä–∫–∞ —Å–≤–µ–∂–µ–µ –Ω–æ—à–µ–Ω–∏—è/–Ω–æ—à–µ–Ω–∏—è –Ω–µ—Ç) –∏ 30+ –¥–Ω–µ–π
        if dt_washed and (dt_worn is None or dt_washed >= dt_worn):
            if now - dt_washed >= timedelta(days=30):
                long_idle.append(name)
    return need_wash, long_idle

async def send_one_user_reminder(uid: int):
    need_wash, long_idle = due_items_for_user(uid)
    if not need_wash and not long_idle:
        return
    parts = []
    if need_wash:
        parts.append("üß∫ –ü–æ—Ä–∞ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å:\n" + "\n".join(f"‚Ä¢ {n}" for n in need_wash))
    if long_idle:
        parts.append("üß∑ –î–∞–≤–Ω–æ –ª–µ–∂–∞—Ç —á–∏—Å—Ç—ã–º–∏ (30+ –¥–Ω–µ–π):\n" + "\n".join(f"‚Ä¢ {n}" for n in long_idle))
    text = "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n" + "\n\n".join(parts)
    try:
        await bot.send_message(uid, text)
    except Exception as e:
        logging.warning(f"Failed to send reminder to {uid}: {e}")

async def reminder_loop():
    """
    –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–≥–ª–∞—Å–Ω–æ –µ–≥–æ notify_time –∏ tz_offset.
    –®–ª—ë–º –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏ (—Ñ–∏–∫—Å–∏—Ä—É–µ–º last_reminder_date).
    """
    while True:
        now_utc = datetime.utcnow()
        cur.execute("SELECT * FROM users WHERE notify_enabled=1")
        users = cur.fetchall()
        for s in users:
            uid = s["user_id"]
            hour = int(s["notify_hour"] if s["notify_hour"] is not None else DEFAULT_REMINDER_HOUR)
            minute = int(s["notify_minute"] if s["notify_minute"] is not None else 0)
            tz = float(s["tz_offset"] if s["tz_offset"] is not None else DEFAULT_TZ_OFFSET)
            local_now = now_utc + timedelta(hours=tz)
            local_date = local_now.date().isoformat()
            if s["last_reminder_date"] == local_date:
                continue
            if local_now.hour == hour and local_now.minute == minute:
                logging.info(f"Send reminder to {uid} at {hour:02d}:{minute:02d} (UTC{tz:+g})")
                await send_one_user_reminder(uid)
                set_last_sent(uid, local_date)
        await asyncio.sleep(30)

# ======================= MAIN =======================
async def main():
    dp.include_router(router)
    await set_commands()
    await start_web_app()             # –¥–µ—Ä–∂–∏–º –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç –¥–ª—è Render Web Service
    asyncio.create_task(reminder_loop())  # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
