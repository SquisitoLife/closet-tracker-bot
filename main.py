from dotenv import load_dotenv
load_dotenv()

import asyncio
import logging
import os
import sqlite3
from datetime import datetime, timezone

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    BotCommand,
)

# =========================
#  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# =========================

BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)  # —É–±–∏—Ä–∞–µ—Ç DeprecationWarning
)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# =========================
#  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite)
# =========================

db = sqlite3.connect("closet.db")
cursor = db.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS clothes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT,
    category TEXT,
    last_worn TEXT,
    last_washed TEXT,
    worn_count INTEGER
)
""")
db.commit()

# =========================
#  –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏
# =========================

def _now_iso() -> str:
    # –í—Å–µ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ UTC ‚Äî –ø–æ—Ç–æ–º –ø—Ä–æ—â–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å
    return datetime.now(timezone.utc).isoformat()

def _rows_to_names(rows):
    return [row[0] for row in rows]

def _make_kb_names(names):
    if not names:
        return None
    # –†–∞–∑–æ–±—å—ë–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2‚Äì3 –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª–∞—Å—å –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    row = []
    keyboard = []
    for i, n in enumerate(names, 1):
        row.append(KeyboardButton(text=n))
        if i % 3 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def set_my_commands():
    await bot.set_my_commands([
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å"),
        BotCommand(command="wear", description="–û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞–¥–µ–ª"),
        BotCommand(command="wash", description="–û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ—Å—Ç–∏—Ä–∞–ª"),
        BotCommand(command="status", description="–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—â–µ–π"),
    ])

# =========================
#  –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
# =========================

class AddClothes(StatesGroup):
    waiting_for_name = State()
    waiting_for_category = State()

class WearFlow(StatesGroup):
    choosing_item = State()

class WashFlow(StatesGroup):
    choosing_item = State()

# =========================
#  –•—ç–Ω–¥–ª–µ—Ä—ã
# =========================

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–¥–µ–∂–¥—É –∏ —Å—Ç–∏—Ä–∫—É.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å\n"
        "‚Ä¢ /wear ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞–¥–µ–ª –≤–µ—â—å\n"
        "‚Ä¢ /wash ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ—Å—Ç–∏—Ä–∞–ª –≤–µ—â—å\n"
        "‚Ä¢ /status ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –≤–µ—â–∞–º\n"
        "‚Ä¢ /help ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1) /add ‚Äî –¥–æ–±–∞–≤—å –≤–µ—â—å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é).\n"
        "2) /wear ‚Äî –≤—ã–±–µ—Ä–∏ –≤–µ—â—å –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–∞–¥–µ–≤–∞–ª.\n"
        "3) /wash ‚Äî –≤—ã–±–µ—Ä–∏ –≤–µ—â—å, –∫–æ–≥–¥–∞ –ø–æ—Å—Ç–∏—Ä–∞–ª.\n"
        "4) /status ‚Äî —Å–≤–æ–¥–∫–∞ (–∫–æ–≥–¥–∞ –Ω–æ—Å–∏–ª/—Å—Ç–∏—Ä–∞–ª, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω–æ—Å–∏–ª)."
    )

# ---- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—â–∏ ----

@router.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –≤–µ—â–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddClothes.waiting_for_name)

@router.message(AddClothes.waiting_for_name)
async def add_wait_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(AddClothes.waiting_for_category)
    await message.answer("–£–∫–∞–∂–∏ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ñ—É—Ç–±–æ–ª–∫–∞, –¥–∂–∏–Ω—Å—ã):")

@router.message(AddClothes.waiting_for_category)
async def add_wait_category(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name", "").strip()
    category = message.text.strip()
    cursor.execute(
        """
        INSERT INTO clothes (user_id, name, category, last_worn, last_washed, worn_count)
        VALUES (?, ?, ?, NULL, NULL, 0)
        """,
        (message.from_user.id, name, category)
    )
    db.commit()
    await state.clear()
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–∏–ª: <b>{name}</b> (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")

# ---- –ù–æ—à–µ–Ω–∏–µ ----

@router.message(Command("wear"))
async def cmd_wear(message: Message, state: FSMContext):
    cursor.execute("SELECT name FROM clothes WHERE user_id = ?", (message.from_user.id,))
    names = _rows_to_names(cursor.fetchall())
    if not names:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π /add, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.")
        return
    kb = _make_kb_names(names)
    await state.set_state(WearFlow.choosing_item)
    await message.answer("–ß—Ç–æ —Ç—ã <b>–Ω–∞–¥–µ–ª</b>?", reply_markup=kb)

@router.message(WearFlow.choosing_item, F.text)
async def wear_choose_item(message: Message, state: FSMContext):
    cursor.execute(
        "SELECT id FROM clothes WHERE user_id = ? AND name = ?",
        (message.from_user.id, message.text.strip())
    )
    row = cursor.fetchone()
    if not row:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –≤–µ—â—å. –í—ã–±–µ—Ä–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    item_id = row[0]
    now = _now_iso()
    cursor.execute(
        "UPDATE clothes SET last_worn = ?, worn_count = worn_count + 1 WHERE id = ?",
        (now, item_id)
    )
    db.commit()
    await state.clear()
    await message.answer(
        f"üëï –û—Ç–º–µ—Ç–∏–ª: —Å–µ–≥–æ–¥–Ω—è –Ω–æ—Å–∏–ª ¬´{message.text.strip()}¬ª.",
        reply_markup=ReplyKeyboardRemove()
    )

# ---- –°—Ç–∏—Ä–∫–∞ ----

@router.message(Command("wash"))
async def cmd_wash(message: Message, state: FSMContext):
    cursor.execute("SELECT name FROM clothes WHERE user_id = ?", (message.from_user.id,))
    names = _rows_to_names(cursor.fetchall())
    if not names:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π /add, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.")
        return
    kb = _make_kb_names(names)
    await state.set_state(WashFlow.choosing_item)
    await message.answer("–ß—Ç–æ —Ç—ã <b>–ø–æ—Å—Ç–∏—Ä–∞–ª</b>?", reply_markup=kb)

@router.message(WashFlow.choosing_item, F.text)
async def wash_choose_item(message: Message, state: FSMContext):
    cursor.execute(
        "SELECT id FROM clothes WHERE user_id = ? AND name = ?",
        (message.from_user.id, message.text.strip())
    )
    row = cursor.fetchone()
    if not row:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –≤–µ—â—å. –í—ã–±–µ—Ä–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    item_id = row[0]
    now = _now_iso()
    cursor.execute(
        "UPDATE clothes SET last_washed = ?, worn_count = 0 WHERE id = ?",
        (now, item_id)
    )
    db.commit()
    await state.clear()
    await message.answer(
        f"üßº –û—Ç–º–µ—Ç–∏–ª: ¬´{message.text.strip()}¬ª —á–∏—Å—Ç–∞—è!",
        reply_markup=ReplyKeyboardRemove()
    )

# ---- –°—Ç–∞—Ç—É—Å ----

@router.message(Command("status"))
async def cmd_status(message: Message):
    cursor.execute(
        "SELECT name, last_worn, last_washed, worn_count FROM clothes WHERE user_id = ?",
        (message.from_user.id,)
    )
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –≤–µ—â–µ–π. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add.")
        return

    lines = []
    for name, worn, washed, count in rows:
        line = (
            f"üëï <b>{name}</b>\n"
            f"  ‚Ä¢ –ù–∞–¥–µ–≤–∞–ª–æ—Å—å: {count} —Ä–∞–∑\n"
            f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –Ω–æ—Å–∏–ª: {worn or '–Ω–∏–∫–æ–≥–¥–∞'}\n"
            f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∏—Ä–∫–∞: {washed or '–Ω–∏–∫–æ–≥–¥–∞'}"
        )
        # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ —Å—Ç–∏—Ä–∫–µ
        if count >= 3:
            line += "\n  ‚ùó –ü–æ—Ä–∞ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å!"
        lines.append(line)

    await message.answer("\n\n".join(lines))

# =========================
#  –ó–∞–ø—É—Å–∫
# =========================

async def main():
    await set_my_commands()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
