import asyncio
import logging
import os
import sqlite3
from contextlib import suppress
from datetime import datetime, timedelta
from typing import List, Optional

from aiohttp import web
from zoneinfo import ZoneInfo, ZoneInfoNotFoundError

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    BotCommand,
)

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("closet-bot")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# =========================
# –ë–î (SQLite)
# =========================
DB_PATH = "closet.db"
db = sqlite3.connect(DB_PATH)
db.row_factory = sqlite3.Row
cursor = db.cursor()

cursor.execute(
    """
CREATE TABLE IF NOT EXISTS clothes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT,
    category TEXT,
    last_worn TEXT,
    last_washed TEXT,
    worn_count INTEGER
)
"""
)

cursor.execute(
    """
CREATE TABLE IF NOT EXISTS user_settings (
    user_id INTEGER PRIMARY KEY,
    notify_on INTEGER DEFAULT 0,           -- 0/1
    notify_time TEXT DEFAULT '09:00',      -- HH:MM
    tz TEXT DEFAULT 'Europe/Moscow'        -- IANA TZ
)
"""
)
db.commit()

# ==========
# FSM (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
# ==========
class AddClothes(StatesGroup):
    waiting_for_name = State()
    waiting_for_category = State()

class ChangeNotifyTime(StatesGroup):
    waiting_for_time = State()

class ChangeTimezone(StatesGroup):
    waiting_for_tz = State()

# =========================
# –ü–∞–º—è—Ç—å (—Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞)
# =========================
# user_id -> "wear" | "wash"
_pending_action: dict[int, str] = {}

# =========================
# –£—Ç–∏–ª–∏—Ç—ã
# =========================
def now_tz(tz_name: str) -> datetime:
    try:
        tz = ZoneInfo(tz_name)
    except ZoneInfoNotFoundError:
        tz = ZoneInfo("Europe/Moscow")
    return datetime.now(tz)

def get_or_create_user_settings(user_id: int) -> sqlite3.Row:
    cursor.execute("SELECT * FROM user_settings WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row is None:
        cursor.execute(
            "INSERT INTO user_settings (user_id, notify_on, notify_time, tz) VALUES (?, 0, '09:00', 'Europe/Moscow')",
            (user_id,),
        )
        db.commit()
        cursor.execute("SELECT * FROM user_settings WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
    return row

def parse_hhmm(text: str) -> Optional[str]:
    parts = text.strip().split(":")
    if len(parts) != 2:
        return None
    h, m = parts
    if not (h.isdigit() and m.isdigit()):
        return None
    hh, mm = int(h), int(m)
    if 0 <= hh <= 23 and 0 <= mm <= 59:
        return f"{hh:02d}:{mm:02d}"
    return None

def list_user_items(user_id: int) -> List[str]:
    cursor.execute("SELECT name FROM clothes WHERE user_id = ? ORDER BY name COLLATE NOCASE", (user_id,))
    return [row["name"] for row in cursor.fetchall()]

def chunk_buttons(names: List[str], per_row: int = 3) -> List[List[KeyboardButton]]:
    rows = []
    row = []
    for nm in names:
        row.append(KeyboardButton(text=nm))
        if len(row) == per_row:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return rows

def human_date(iso: Optional[str]) -> str:
    if not iso:
        return "–Ω–∏–∫–æ–≥–¥–∞"
    try:
        dt = datetime.fromisoformat(iso)
        return dt.strftime("%Y-%m-%d %H:%M")
    except Exception:
        return iso

# =========================
# –ö–æ–º–∞–Ω–¥—ã (–º–µ–Ω—é)
# =========================
async def set_commands():
    cmds = [
        BotCommand(command="start", description="–ù–∞—á–∞–ª–æ / –º–µ–Ω—é"),
        BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å"),
        BotCommand(command="wear", description="–û—Ç–º–µ—Ç–∏—Ç—å: –Ω–æ—Å–∏–ª"),
        BotCommand(command="wash", description="–û—Ç–º–µ—Ç–∏—Ç—å: –ø–æ—Å—Ç–∏—Ä–∞–ª"),
        BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å –≤–µ—â–µ–π"),
        BotCommand(command="notify_on", description="–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand(command="notify_off", description="–í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand(command="notify_time", description="–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (HH:MM)"),
        BotCommand(command="notify_tz", description="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (IANA)"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
    ]
    await bot.set_my_commands(cmds)

# =========================
# –•—ç–Ω–¥–ª–µ—Ä—ã
# =========================
@router.message(F.text.in_({"/start", "/help"}))
async def cmd_start(message: Message):
    s = get_or_create_user_settings(message.from_user.id)
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≥–∞—Ä–¥–µ—Ä–æ–± –∏ –Ω–∞–ø–æ–º–Ω—é, –∫–æ–≥–¥–∞ –ø–æ—Ä–∞ —Å—Ç–∏—Ä–∞—Ç—å üëï\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å\n"
        "‚Ä¢ /wear ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–æ—Å–∏–ª\n"
        "‚Ä¢ /wash ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ—Å—Ç–∏—Ä–∞–ª\n"
        "‚Ä¢ /status ‚Äî —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        "‚Ä¢ /notify_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å, /notify_off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å\n"
        "‚Ä¢ /notify_time ‚Äî –≤—Ä–µ–º—è (HH:MM)\n"
        "‚Ä¢ /notify_tz ‚Äî —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä Europe/Moscow)\n\n"
        f"–°–µ–π—á–∞—Å: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <b>{'–≤–∫–ª—é—á–µ–Ω—ã' if s['notify_on'] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}</b>, "
        f"–≤—Ä–µ–º—è <b>{s['notify_time']}</b>, TZ <b>{s['tz']}</b>."
    )
    await message.answer(text)

@router.message(F.text == "/add")
async def cmd_add(message: Message, state: FSMContext):
    await state.set_state(AddClothes.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏:", reply_markup=ReplyKeyboardRemove())

@router.message(AddClothes.waiting_for_name)
async def add_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(AddClothes.waiting_for_category)
    await message.answer("–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ñ—É—Ç–±–æ–ª–∫–∞, –¥–∂–∏–Ω—Å—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏):")

@router.message(AddClothes.waiting_for_category)
async def add_category(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name").strip()
    category = message.text.strip()
    cursor.execute(
        """
        INSERT INTO clothes (user_id, name, category, last_worn, last_washed, worn_count)
        VALUES (?, ?, ?, NULL, NULL, 0)
        """,
        (message.from_user.id, name, category),
    )
    db.commit()
    await state.clear()
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{name}</b> ({category})")

@router.message(F.text == "/status")
async def cmd_status(message: Message):
    cursor.execute(
        "SELECT name, last_worn, last_washed, worn_count FROM clothes WHERE user_id = ? ORDER BY name COLLATE NOCASE",
        (message.from_user.id,),
    )
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –≤–µ—â–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π /add")
        return
    lines = []
    for row in rows:
        name = row["name"]
        worn = human_date(row["last_worn"])
        washed = human_date(row["last_washed"])
        count = row["worn_count"]
        line = (
            f"üëï <b>{name}</b>\n"
            f"  ‚Äî –ù–∞–¥–µ–≤–∞–ª–æ—Å—å: {count} —Ä–∞–∑\n"
            f"  ‚Äî –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –Ω–æ—Å–∏–ª: {worn}\n"
            f"  ‚Äî –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∏—Ä–∫–∞: {washed}"
        )
        if count >= 3:
            line += "\n  ‚ùó –ü–æ—Ö–æ–∂–µ, —Å—Ç–æ–∏—Ç –ø–æ—Å—Ç–∏—Ä–∞—Ç—å üôÇ"
        lines.append(line)
    await message.answer("\n\n".join(lines))

# ----- wear / wash —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ -----
@router.message(F.text == "/wear")
async def cmd_wear(message: Message):
    items = list_user_items(message.from_user.id)
    if not items:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π /add")
        return
    _pending_action[message.from_user.id] = "wear"
    kb = ReplyKeyboardMarkup(keyboard=chunk_buttons(items, 3), resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏ –≤–µ—â—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã <b>–Ω–æ—Å–∏–ª</b>:", reply_markup=kb)

@router.message(F.text == "/wash")
async def cmd_wash(message: Message):
    items = list_user_items(message.from_user.id)
    if not items:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π /add")
        return
    _pending_action[message.from_user.id] = "wash"
    kb = ReplyKeyboardMarkup(keyboard=chunk_buttons(items, 3), resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏ –≤–µ—â—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã <b>–ø–æ—Å—Ç–∏—Ä–∞–ª</b>:", reply_markup=kb)

@router.message(F.text)
async def handle_item_click(message: Message):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ wear/wash –∏ –Ω–∞–∂–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏ ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ."""
    user_id = message.from_user.id
    action = _pending_action.get(user_id)
    if not action:
        return  # –Ω–µ –∂–¥—ë–º –≤—ã–±–æ—Ä–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    name = message.text.strip()
    cursor.execute("SELECT id FROM clothes WHERE user_id = ? AND name = ?", (user_id, name))
    row = cursor.fetchone()
    if not row:
        return  # –Ω–µ –Ω–∞—à–∞ –∫–Ω–æ–ø–∫–∞

    now_iso = datetime.now().isoformat(timespec="minutes")
    if action == "wear":
        cursor.execute(
            "UPDATE clothes SET last_worn = ?, worn_count = worn_count + 1 WHERE user_id = ? AND name = ?",
            (now_iso, user_id, name),
        )
        db.commit()
        await message.answer(
            f"–û—Ç–º–µ—á–µ–Ω–æ: —Ç—ã –Ω–æ—Å–∏–ª ¬´{name}¬ª —Å–µ–≥–æ–¥–Ω—è.",
            reply_markup=ReplyKeyboardRemove()
        )
    elif action == "wash":
        cursor.execute(
            "UPDATE clothes SET last_washed = ?, worn_count = 0 WHERE user_id = ? AND name = ?",
            (now_iso, user_id, name),
        )
        db.commit()
        await message.answer(
            f"–û—Ç–º–µ—á–µ–Ω–æ: ¬´{name}¬ª –ø–æ—Å—Ç–∏—Ä–∞–Ω–∞!",
            reply_markup=ReplyKeyboardRemove()
        )

    # –æ—á–∏—Å—Ç–∏–º —Ä–µ–∂–∏–º
    _pending_action.pop(user_id, None)

# ----- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -----
@router.message(F.text.in_({"/notify_on", "/notify_off"}))
async def toggle_notify(message: Message):
    on = 1 if message.text == "/notify_on" else 0
    cursor.execute("UPDATE user_settings SET notify_on = ? WHERE user_id = ?", (on, message.from_user.id))
    db.commit()
    s = get_or_create_user_settings(message.from_user.id)
    await message.answer(
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <b>{'–≤–∫–ª—é—á–µ–Ω—ã' if s['notify_on'] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}</b>. "
        f"–í—Ä–µ–º—è: <b>{s['notify_time']}</b>, TZ: <b>{s['tz']}</b>"
    )

@router.message(F.text == "/notify_time")
async def ask_notify_time(message: Message, state: FSMContext):
    await state.set_state(ChangeNotifyTime.waiting_for_time)
    await message.answer("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 09:30).", reply_markup=ReplyKeyboardRemove())

@router.message(ChangeNotifyTime.waiting_for_time)
async def set_notify_time(message: Message, state: FSMContext):
    val = parse_hhmm(message.text)
    if not val:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:45.")
        return
    cursor.execute("UPDATE user_settings SET notify_time = ? WHERE user_id = ?", (val, message.from_user.id))
    db.commit()
    await state.clear()
    s = get_or_create_user_settings(message.from_user.id)
    await message.answer(f"–ì–æ—Ç–æ–≤–æ! –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: <b>{s['notify_time']}</b>. –¢–µ–∫—É—â–∏–π TZ: <b>{s['tz']}</b>.")

@router.message(F.text == "/notify_tz")
async def ask_tz(message: Message, state: FSMContext):
    await state.set_state(ChangeTimezone.waiting_for_tz)
    await message.answer(
        "–í–≤–µ–¥–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (IANA), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>Europe/Moscow</code>, <code>Europe/Berlin</code>, "
        "<code>Asia/Almaty</code>.\n–°–ø–∏—Å–æ–∫: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
        reply_markup=ReplyKeyboardRemove(),
    )

@router.message(ChangeTimezone.waiting_for_tz)
async def set_tz(message: Message, state: FSMContext):
    tz_candidate = message.text.strip()
    try:
        _ = ZoneInfo(tz_candidate)
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å TZ. –ü—Ä–∏–º–µ—Ä: Europe/Moscow. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    cursor.execute("UPDATE user_settings SET tz = ? WHERE user_id = ?", (tz_candidate, message.from_user.id))
    db.commit()
    await state.clear()
    s = get_or_create_user_settings(message.from_user.id)
    await message.answer(f"–ì–æ—Ç–æ–≤–æ! TZ: <b>{s['tz']}</b>. –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: <b>{s['notify_time']}</b>.")

# =========================
# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
# =========================
REMIND_WORN_NOT_WASHED_DAYS = 7
REMIND_CLEAN_NOT_WORN_DAYS = 30

async def reminders_loop():
    await asyncio.sleep(5)
    sent_guard = {}  # (user_id, 'YYYY-MM-DD HH:MM')

    while True:
        try:
            cursor.execute("SELECT user_id, notify_on, notify_time, tz FROM user_settings WHERE notify_on = 1")
            users = cursor.fetchall()
            for s in users:
                user_id = s["user_id"]
                tz = s["tz"]
                t = s["notify_time"]

                try:
                    now_local = now_tz(tz)
                except Exception:
                    now_local = now_tz("Europe/Moscow")

                hhmm_now = now_local.strftime("%H:%M")
                if hhmm_now != t:
                    continue

                guard_key = (user_id, now_local.strftime("%Y-%m-%d %H:%M"))
                if sent_guard.get(guard_key):
                    continue

                cursor.execute(
                    "SELECT name, last_worn, last_washed FROM clothes WHERE user_id = ? ORDER BY name COLLATE NOCASE",
                    (user_id,),
                )
                rows = cursor.fetchall()
                need_lines = []
                for row in rows:
                    name = row["name"]
                    last_worn = row["last_worn"]
                    last_washed = row["last_washed"]

                    # 1) –Ω–æ—Å–∏–ª, –Ω–æ –Ω–µ —Å—Ç–∏—Ä–∞–ª 7 –¥–Ω–µ–π
                    if last_worn and (not last_washed or last_washed < last_worn):
                        try:
                            dt_worn = datetime.fromisoformat(last_worn)
                        except Exception:
                            dt_worn = None
                        if dt_worn and datetime.utcnow() >= (dt_worn + timedelta(days=REMIND_WORN_NOT_WASHED_DAYS)):
                            need_lines.append(f"‚Ä¢ ¬´{name}¬ª: –¥–∞–≤–Ω–æ –Ω–æ—Å–∏–ª ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∏—Ä–∞—Ç—å!")

                    # 2) —á–∏—Å—Ç–∞—è –≤–µ—â—å –∏ –¥–∞–≤–Ω–æ –Ω–µ –Ω–∞–¥–µ–≤–∞–ª (30 –¥–Ω–µ–π)
                    base = last_washed or last_worn
                    if base:
                        try:
                            dt_base = datetime.fromisoformat(base)
                        except Exception:
                            dt_base = None
                        if dt_base and datetime.utcnow() >= (dt_base + timedelta(days=REMIND_CLEAN_NOT_WORN_DAYS)):
                            need_lines.append(f"‚Ä¢ ¬´{name}¬ª: –¥–∞–≤–Ω–æ –Ω–µ –Ω–∞–¥–µ–≤–∞–ª ‚Äî –∑–∞–≥–ª—è–Ω–∏ –≤ —à–∫–∞—Ñ üòâ")

                if need_lines:
                    text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üëá\n\n" + "\n".join(need_lines)
                    with suppress(Exception):
                        await bot.send_message(user_id, text)

                sent_guard[guard_key] = True

        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ –≤ reminders_loop: %s", e)

        await asyncio.sleep(60)

# =========================
# Keep-alive –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
# =========================
async def handle_root(request: web.Request) -> web.Response:
    return web.Response(text="OK")

async def run_keepalive():
    app = web.Application()
    app.router.add_get("/", handle_root)
    app.router.add_get("/healthz", handle_root)

    runner = web.AppRunner(app)
    await runner.setup()

    port = int(os.getenv("PORT", "10000"))
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    log.info(f"HTTP keep-alive started on 0.0.0.0:{port}")

    try:
        while True:
            await asyncio.sleep(3600)
    finally:
        with suppress(Exception):
            await runner.cleanup()

# =========================
# –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
# =========================
async def main():
    dp.include_router(router)
    await set_commands()

    keepalive_task = asyncio.create_task(run_keepalive())
    reminders_task = asyncio.create_task(reminders_loop())

    try:
        await dp.start_polling(bot)
    finally:
        for t in (keepalive_task, reminders_task):
            t.cancel()
            with suppress(asyncio.CancelledError):
                await t

if __name__ == "__main__":
    asyncio.run(main())
