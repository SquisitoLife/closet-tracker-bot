# main.py
from dotenv import load_dotenv
load_dotenv()

import asyncio
import logging
import os
import sqlite3
from datetime import datetime

from aiohttp import web

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.client.default import DefaultBotProperties


# ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =========
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment")

# –í aiogram 3.5+ parse_mode –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ DefaultBotProperties.
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher(storage=MemoryStorage())
router = Router()


# ========= –ü—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä (Render Web Service –∂–¥—ë—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç) =========
async def _health(_request: web.Request):
    return web.Response(text="OK")

async def run_http_server():
    """
    –ü–æ–¥–Ω–∏–º–∞–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç ($PORT).
    """
    app = web.Application()
    app.router.add_get("/", _health)
    port = int(os.environ.get("PORT", 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"HTTP health server started on 0.0.0.0:{port}")


# ========= –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö =========
DB_PATH = "closet.db"
db = sqlite3.connect(DB_PATH, check_same_thread=False)
db.row_factory = sqlite3.Row
cursor = db.cursor()
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS clothes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT,
        category TEXT,
        last_worn TEXT,
        last_washed TEXT,
        worn_count INTEGER
    )
    """
)
db.commit()


# ========= FSM (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π) =========
class AddClothes(StatesGroup):
    waiting_for_name = State()
    waiting_for_category = State()

class WearFlow(StatesGroup):
    choosing = State()

class WashFlow(StatesGroup):
    choosing = State()


# ========= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =========
def build_keyboard_from_items(names: list[str], per_row: int = 2) -> ReplyKeyboardMarkup:
    rows = []
    row = []
    for i, name in enumerate(names, 1):
        row.append(KeyboardButton(text=name))
        if i % per_row == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

def fetch_user_items(user_id: int) -> list[sqlite3.Row]:
    cursor.execute("SELECT id, name FROM clothes WHERE user_id = ? ORDER BY name", (user_id,))
    return cursor.fetchall()

def now_iso() -> str:
    return datetime.now().isoformat(timespec="seconds")


# ========= –•—ç–Ω–¥–ª–µ—Ä—ã =========
@router.message(CommandStart())
async def cmd_start(message: Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–¥–µ–∂–¥—É –∏ —Å—Ç–∏—Ä–∫–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å\n"
        "‚Ä¢ /wear ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–æ—Å–∏–ª –≤–µ—â—å\n"
        "‚Ä¢ /wash ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ—Å—Ç–∏—Ä–∞–ª –≤–µ—â—å\n"
        "‚Ä¢ /status ‚Äî –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ –≤–µ—â–∞–º\n"
    )
    await message.answer(text)


# ---- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—â–∏ ----
@router.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    await state.set_state(AddClothes.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏:")

@router.message(AddClothes.waiting_for_name, F.text.len() > 0)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(AddClothes.waiting_for_category)
    await message.answer("–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ñ—É—Ç–±–æ–ª–∫–∞, –¥–∂–∏–Ω—Å—ã, –Ω–æ—Å–∫–∏):")

@router.message(AddClothes.waiting_for_category, F.text.len() > 0)
async def process_category(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"].strip()
    category = message.text.strip()
    cursor.execute(
        """
        INSERT INTO clothes (user_id, name, category, last_worn, last_washed, worn_count)
        VALUES (?, ?, ?, NULL, NULL, 0)
        """,
        (message.from_user.id, name, category),
    )
    db.commit()
    await state.clear()
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–µ—â—å: <b>{name}</b> ({category})")


# ---- –ù–æ—Å–∏–ª –≤–µ—â—å (/wear) ----
@router.message(Command("wear"))
async def cmd_wear(message: Message, state: FSMContext):
    items = fetch_user_items(message.from_user.id)
    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add")
        return
    kb = build_keyboard_from_items([row["name"] for row in items])
    await state.set_state(WearFlow.choosing)
    await message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω–æ—Å–∏–ª:", reply_markup=kb)

@router.message(WearFlow.choosing, F.text)
async def mark_worn(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    cursor.execute(
        "SELECT id FROM clothes WHERE user_id = ? AND name = ?",
        (message.from_user.id, message.text),
    )
    row = cursor.fetchone()
    if not row:
        await message.answer("–¢–∞–∫–æ–π –≤–µ—â–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –í—ã–±–µ—Ä–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        return

    cursor.execute(
        "UPDATE clothes SET last_worn = ?, worn_count = worn_count + 1 WHERE id = ?",
        (now_iso(), row["id"]),
    )
    db.commit()
    await state.clear()
    await message.answer(
        f"üß• –û—Ç–º–µ—á–µ–Ω–æ: –Ω–æ—Å–∏–ª ¬´{message.text}¬ª —Å–µ–≥–æ–¥–Ω—è.",
        reply_markup=ReplyKeyboardRemove(),
    )


# ---- –ü–æ—Å—Ç–∏—Ä–∞–ª –≤–µ—â—å (/wash) ----
@router.message(Command("wash"))
async def cmd_wash(message: Message, state: FSMContext):
    items = fetch_user_items(message.from_user.id)
    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add")
        return
    kb = build_keyboard_from_items([row["name"] for row in items])
    await state.set_state(WashFlow.choosing)
    await message.answer("–ß—Ç–æ —Ç—ã –ø–æ—Å—Ç–∏—Ä–∞–ª?", reply_markup=kb)

@router.message(WashFlow.choosing, F.text)
async def mark_washed(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    cursor.execute(
        "SELECT id FROM clothes WHERE user_id = ? AND name = ?",
        (message.from_user.id, message.text),
    )
    row = cursor.fetchone()
    if not row:
        await message.answer("–¢–∞–∫–æ–π –≤–µ—â–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –í—ã–±–µ—Ä–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        return

    cursor.execute(
        "UPDATE clothes SET last_washed = ?, worn_count = 0 WHERE id = ?",
        (now_iso(), row["id"]),
    )
    db.commit()
    await state.clear()
    await message.answer(
        f"üßº ¬´{message.text}¬ª –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —á–∏—Å—Ç–∞—è!",
        reply_markup=ReplyKeyboardRemove(),
    )


# ---- –°—Ç–∞—Ç—É—Å ----
@router.message(Command("status"))
async def cmd_status(message: Message):
    cursor.execute(
        """
        SELECT name, last_worn, last_washed, worn_count
        FROM clothes
        WHERE user_id = ?
        ORDER BY name
        """,
        (message.from_user.id,),
    )
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add")
        return

    lines = []
    for r in rows:
        name = r["name"]
        worn = r["last_worn"] or "–Ω–∏–∫–æ–≥–¥–∞"
        washed = r["last_washed"] or "–Ω–∏–∫–æ–≥–¥–∞"
        count = r["worn_count"] or 0
        line = (
            f"üëï <b>{name}</b>\n"
            f"  ‚Ä¢ –ù–∞–¥–µ–≤–∞–ª–æ—Å—å: {count} —Ä–∞–∑\n"
            f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –Ω–æ—Å–∏–ª: {worn}\n"
            f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∏—Ä–∫–∞: {washed}"
        )
        if count >= 3:
            line += "\n  ‚ùó –ü–æ—Ä–∞ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å!"
        lines.append(line)

    await message.answer("\n\n".join(lines))


# ========= –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ =========
async def main():
    # –ø–æ–¥–Ω–∏–º–∞–µ–º HTTP health-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    asyncio.create_task(run_http_server())

    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
